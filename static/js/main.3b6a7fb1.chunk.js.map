{"version":3,"sources":["App.module.scss","SentimentAnalysis/SentimentAnalysis.js","App.js","serviceWorker.js","index.js","SentimentAnalysis/SentimentAnalysis.module.scss"],"names":["module","exports","Option","Select","TextArea","Input","SentimentAnalysis","className","sentimentAnalysisStyles","sentimentContainer","to","sentimentHeader","size","voicesDropDown","defaultValue","value","sliderContainer","inputTextarea","rows","autosize","analyzeButton","App","appStyles","appContainer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIACAA,EAAOC,QAAU,CAAC,aAAe,4B,+NCI3BC,EAASC,IAAOD,OAChBE,EAAWC,IAAMD,SACR,SAASE,IACpB,OACI,yBAAKC,UAAWC,IAAwBC,oBACpC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMC,GAAI,KACN,wBAAIH,UAAWC,IAAwBG,iBAAvC,wBAGR,kBAAC,IAAD,CACIC,KAAM,QACNL,UAAWC,IAAwBK,eACnCC,aAAc,WAEd,kBAACZ,EAAD,CAAQa,MAAO,WAAf,qBAKJ,yBAAKR,UAAWC,IAAwBQ,iBACpC,yCACA,kBAAC,IAAD,CAAQF,aAAc,MAG1B,yBAAKP,UAAWC,IAAwBQ,iBACpC,0CACA,kBAAC,IAAD,CAAQF,aAAc,MAG1B,kBAACV,EAAD,CACIG,UAAWC,IAAwBS,cACnCC,KAAM,EAAGC,UAAU,IAEvB,kBAAC,IAAD,CACIZ,UAAWC,IAAwBY,eADvC,YC5BGC,MARf,WACI,OACI,yBAAKd,UAAWe,IAAUC,cACtB,kBAACjB,EAAD,QCMQkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEpInBtC,EAAOC,QAAU,CAAC,mBAAqB,8CAA8C,gBAAkB,2CAA2C,eAAiB,0CAA0C,cAAgB,yCAAyC,gBAAkB,2CAA2C,cAAgB,4C","file":"static/js/main.3b6a7fb1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"App_appContainer__1hNk1\"};","import React from 'react';\nimport {Select, Slider, Input, Button} from \"antd\";\nimport {BrowserRouter, Link} from 'react-router-dom';\nimport sentimentAnalysisStyles from './SentimentAnalysis.module.scss';\n\nconst Option = Select.Option;\nconst TextArea = Input.TextArea;\nexport default function SentimentAnalysis() {\n    return (\n        <div className={sentimentAnalysisStyles.sentimentContainer}>\n            <BrowserRouter>\n                <Link to={'/'}>\n                    <h1 className={sentimentAnalysisStyles.sentimentHeader}>Sentiment Analysis</h1>\n                </Link>\n            </BrowserRouter>\n            <Select\n                size={\"large\"}\n                className={sentimentAnalysisStyles.voicesDropDown}\n                defaultValue={\"option1\"}\n            >\n                <Option value={\"option1\"}>\n                    Select an option\n                </Option>\n            </Select>\n\n            <div className={sentimentAnalysisStyles.sliderContainer}>\n                <label> Rate </label>\n                <Slider defaultValue={30}/>\n            </div>\n\n            <div className={sentimentAnalysisStyles.sliderContainer}>\n                <label> Pitch </label>\n                <Slider defaultValue={30}/>\n            </div>\n\n            <TextArea\n                className={sentimentAnalysisStyles.inputTextarea}\n                rows={8} autosize={false}/>\n\n            <Button\n                className={sentimentAnalysisStyles.analyzeButton}\n            >\n                Analyze\n            </Button>\n\n        </div>\n    );\n}","import React from 'react';\nimport appStyles from './App.module.scss';\nimport SentimentAnalysis from \"./SentimentAnalysis/SentimentAnalysis\";\nfunction App() {\n    return (\n        <div className={appStyles.appContainer}>\n            <SentimentAnalysis/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sentimentContainer\":\"SentimentAnalysis_sentimentContainer__1m-Rj\",\"sentimentHeader\":\"SentimentAnalysis_sentimentHeader__2s_qm\",\"voicesDropDown\":\"SentimentAnalysis_voicesDropDown__18TH_\",\"analyzeButton\":\"SentimentAnalysis_analyzeButton__2cxGO\",\"sliderContainer\":\"SentimentAnalysis_sliderContainer___Df0A\",\"inputTextarea\":\"SentimentAnalysis_inputTextarea__3crtC\"};"],"sourceRoot":""}